// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgTeam.proto

#include "NFMsgTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_NFMsgBase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ident;
}  // namespace protobuf_NFMsgBase_2eproto
namespace protobuf_NFMsgTeam_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgTeam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TeammemberInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgTeam_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TeamInfo;
}  // namespace protobuf_NFMsgTeam_2eproto
namespace NFMsg {
class TeammemberInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeammemberInfo>
      _instance;
} _TeammemberInfo_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamInfo>
      _instance;
} _TeamInfo_default_instance_;
class ReqAckCreateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateTeam>
      _instance;
} _ReqAckCreateTeam_default_instance_;
class ReqAckJoinTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinTeam>
      _instance;
} _ReqAckJoinTeam_default_instance_;
class ReqAckLeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveTeam>
      _instance;
} _ReqAckLeaveTeam_default_instance_;
class ReqAckOprTeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprTeamMember>
      _instance;
} _ReqAckOprTeamMember_default_instance_;
class ReqAckInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckInviteTeam>
      _instance;
} _ReqAckInviteTeam_default_instance_;
class ReqTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqTeamEnterEctype>
      _instance;
} _ReqTeamEnterEctype_default_instance_;
class AckTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckTeamEnterEctype>
      _instance;
} _AckTeamEnterEctype_default_instance_;
}  // namespace NFMsg
namespace protobuf_NFMsgTeam_2eproto {
static void InitDefaultsTeammemberInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TeammemberInfo_default_instance_;
    new (ptr) ::NFMsg::TeammemberInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TeammemberInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_TeammemberInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTeammemberInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsTeamInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TeamInfo_default_instance_;
    new (ptr) ::NFMsg::TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TeamInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_TeamInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTeamInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgTeam_2eproto::scc_info_TeammemberInfo.base,}};

static void InitDefaultsReqAckCreateTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCreateTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckCreateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCreateTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckCreateTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckCreateTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckJoinTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckJoinTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckJoinTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckLeaveTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLeaveTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckLeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLeaveTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckLeaveTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckLeaveTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckOprTeamMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckOprTeamMember_default_instance_;
    new (ptr) ::NFMsg::ReqAckOprTeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckOprTeamMember::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckOprTeamMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckOprTeamMember}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckInviteTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckInviteTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckInviteTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckInviteTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckInviteTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqTeamEnterEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqTeamEnterEctype_default_instance_;
    new (ptr) ::NFMsg::ReqTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqTeamEnterEctype::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqTeamEnterEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqTeamEnterEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckTeamEnterEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckTeamEnterEctype_default_instance_;
    new (ptr) ::NFMsg::AckTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckTeamEnterEctype::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckTeamEnterEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckTeamEnterEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TeammemberInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeamInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckCreateTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckJoinTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckLeaveTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckOprTeamMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckInviteTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqTeamEnterEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckTeamEnterEctype.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, nlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, headicon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, captain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, teammemberinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, xteaminfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, invite_target_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nserverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, nresult_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::TeammemberInfo)},
  { 10, -1, sizeof(::NFMsg::TeamInfo)},
  { 18, -1, sizeof(::NFMsg::ReqAckCreateTeam)},
  { 25, -1, sizeof(::NFMsg::ReqAckJoinTeam)},
  { 32, -1, sizeof(::NFMsg::ReqAckLeaveTeam)},
  { 39, -1, sizeof(::NFMsg::ReqAckOprTeamMember)},
  { 48, -1, sizeof(::NFMsg::ReqAckInviteTeam)},
  { 56, -1, sizeof(::NFMsg::ReqTeamEnterEctype)},
  { 67, -1, sizeof(::NFMsg::AckTeamEnterEctype)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TeammemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckCreateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckJoinTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckLeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckOprTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqTeamEnterEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckTeamEnterEctype_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NFMsgTeam.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017NFMsgTeam.proto\022\005NFMsg\032\017NFMsgBase.prot"
      "o\"n\n\016TeammemberInfo\022\037\n\tplayer_id\030\001 \001(\0132\014"
      ".NFMsg.Ident\022\014\n\004name\030\002 \001(\t\022\016\n\006nLevel\030\003 \001"
      "(\005\022\013\n\003job\030\004 \001(\005\022\020\n\010HeadIcon\030\005 \001(\t\"z\n\010Tea"
      "mInfo\022\035\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022 \n\n"
      "captain_id\030\002 \001(\0132\014.NFMsg.Ident\022-\n\016teamme"
      "mberInfo\030\003 \003(\0132\025.NFMsg.TeammemberInfo\"U\n"
      "\020ReqAckCreateTeam\022\035\n\007team_id\030\001 \001(\0132\014.NFM"
      "sg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg.Team"
      "Info\"S\n\016ReqAckJoinTeam\022\035\n\007team_id\030\001 \001(\0132"
      "\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg"
      ".TeamInfo\"T\n\017ReqAckLeaveTeam\022\035\n\007team_id\030"
      "\001 \001(\0132\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017"
      ".NFMsg.TeamInfo\"\350\002\n\023ReqAckOprTeamMember\022"
      "\035\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022\037\n\tmember"
      "_id\030\002 \001(\0132\014.NFMsg.Ident\022<\n\004type\030\003 \001(\0162.."
      "NFMsg.ReqAckOprTeamMember.EGTeamMemberOp"
      "rType\022\"\n\txTeamInfo\030\004 \001(\0132\017.NFMsg.TeamInf"
      "o\"\256\001\n\023EGTeamMemberOprType\022\r\n\tEGAT_DOWN\020\000"
      "\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_APP"
      "OINT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020\005\022\024"
      "\n\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPLY\020\007"
      "\022\020\n\014EGAT_KICKOUT\020\010\"x\n\020ReqAckInviteTeam\022\035"
      "\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022\035\n\007self_id"
      "\030\002 \001(\0132\014.NFMsg.Ident\022&\n\020invite_target_id"
      "\030\003 \001(\0132\014.NFMsg.Ident\"\233\001\n\022ReqTeamEnterEct"
      "ype\022\035\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022\035\n\007se"
      "lf_id\030\002 \001(\0132\014.NFMsg.Ident\022\021\n\tnEctypeID\030\003"
      " \001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005\022"
      "\021\n\tnServerID\030\006 \001(\005\"\210\001\n\022AckTeamEnterEctyp"
      "e\022\035\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022\035\n\007self"
      "_id\030\002 \001(\0132\014.NFMsg.Ident\022\021\n\tnEctypeID\030\003 \001"
      "(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgTeam.proto", &protobuf_RegisterTypes);
  ::protobuf_NFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NFMsgTeam_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgTeam_2eproto::file_level_enum_descriptors[0];
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TeammemberInfo::InitAsDefaultInstance() {
  ::NFMsg::_TeammemberInfo_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void TeammemberInfo::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_TeammemberInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TeammemberInfo)
}
TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.headicon().size() > 0) {
    headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  ::memcpy(&nlevel_, &from.nlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.TeammemberInfo)
}

void TeammemberInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(job_));
}

TeammemberInfo::~TeammemberInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.TeammemberInfo)
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void TeammemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_TeammemberInfo.base);
  return *internal_default_instance();
}


void TeammemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
  ::memset(&nlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  _internal_metadata_.Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TeammemberInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.TeammemberInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nLevel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HeadIcon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headicon().data(), static_cast<int>(this->headicon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NFMsg.TeammemberInfo.HeadIcon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TeammemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TeammemberInfo)
  return false;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.TeammemberInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // int32 job = 4;
  if (this->job() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.TeammemberInfo.HeadIcon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headicon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TeammemberInfo)
}

::google::protobuf::uint8* TeammemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player_id(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.TeammemberInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // int32 job = 4;
  if (this->job() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NFMsg.TeammemberInfo.HeadIcon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TeammemberInfo)
  return target;
}

size_t TeammemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TeammemberInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string HeadIcon = 5;
  if (this->headicon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 nLevel = 3;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());
  }

  // int32 job = 4;
  if (this->job() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeammemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeammemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TeammemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TeammemberInfo)
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.headicon().size() > 0) {

    headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
  if (from.nlevel() != 0) {
    set_nlevel(from.nlevel());
  }
  if (from.job() != 0) {
    set_job(from.job());
  }
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeammemberInfo::InternalSwap(TeammemberInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headicon_.Swap(&other->headicon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(nlevel_, other->nlevel_);
  swap(job_, other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
  ::NFMsg::_TeamInfo_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_TeamInfo_default_instance_._instance.get_mutable()->captain_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void TeamInfo::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void TeamInfo::clear_captain_id() {
  if (GetArenaNoVirtual() == NULL && captain_id_ != NULL) {
    delete captain_id_;
  }
  captain_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      teammemberinfo_(from.teammemberinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_captain_id()) {
    captain_id_ = new ::NFMsg::Ident(*from.captain_id_);
  } else {
    captain_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captain_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(captain_id_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete captain_id_;
}

void TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamInfo& TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_TeamInfo.base);
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teammemberinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && captain_id_ != NULL) {
    delete captain_id_;
  }
  captain_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident captain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_captain_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teammemberinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_captain_id(), output);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->teammemberinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_captain_id(), deterministic, target);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->teammemberinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TeamInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->teammemberinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teammemberinfo(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident captain_id = 2;
  if (this->has_captain_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *captain_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_captain_id()) {
    mutable_captain_id()->::NFMsg::Ident::MergeFrom(from.captain_id());
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  CastToBase(&teammemberinfo_)->InternalSwap(CastToBase(&other->teammemberinfo_));
  swap(team_id_, other->team_id_);
  swap(captain_id_, other->captain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckCreateTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqAckCreateTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCreateTeam)
}
ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCreateTeam)
}

void ReqAckCreateTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCreateTeam)
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqAckCreateTeam.base);
  return *internal_default_instance();
}


void ReqAckCreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckCreateTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckCreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckCreateTeam)
  return false;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckCreateTeam)
}

::google::protobuf::uint8* ReqAckCreateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCreateTeam)
  return target;
}

size_t ReqAckCreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCreateTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCreateTeam)
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateTeam::InternalSwap(ReqAckCreateTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckJoinTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqAckJoinTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinTeam)
}
ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinTeam)
}

void ReqAckJoinTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinTeam)
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqAckJoinTeam.base);
  return *internal_default_instance();
}


void ReqAckJoinTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckJoinTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckJoinTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckJoinTeam)
  return false;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckJoinTeam)
}

::google::protobuf::uint8* ReqAckJoinTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinTeam)
  return target;
}

size_t ReqAckJoinTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinTeam)
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinTeam::InternalSwap(ReqAckJoinTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckLeaveTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqAckLeaveTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckLeaveTeam)
}
ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLeaveTeam)
}

void ReqAckLeaveTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLeaveTeam)
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqAckLeaveTeam.base);
  return *internal_default_instance();
}


void ReqAckLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckLeaveTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckLeaveTeam)
  return false;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckLeaveTeam)
}

::google::protobuf::uint8* ReqAckLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLeaveTeam)
  return target;
}

size_t ReqAckLeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLeaveTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.TeamInfo xTeamInfo = 2;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLeaveTeam)
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveTeam::InternalSwap(ReqAckLeaveTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckOprTeamMember::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqAckOprTeamMember::clear_member_id() {
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqAckOprTeamMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckOprTeamMember)
}
ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::NFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckOprTeamMember)
}

void ReqAckOprTeamMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(type_));
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckOprTeamMember)
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqAckOprTeamMember.base);
  return *internal_default_instance();
}


void ReqAckOprTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckOprTeamMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckOprTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckOprTeamMember)
  return false;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member_id(), output);
  }

  // .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .NFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_xteaminfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckOprTeamMember)
}

::google::protobuf::uint8* ReqAckOprTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member_id(), deterministic, target);
  }

  // .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .NFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_xteaminfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckOprTeamMember)
  return target;
}

size_t ReqAckOprTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckOprTeamMember)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  // .NFMsg.TeamInfo xTeamInfo = 4;
  if (this->has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  // .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprTeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckOprTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckOprTeamMember)
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_member_id()) {
    mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
  }
  if (from.has_xteaminfo()) {
    mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprTeamMember::InternalSwap(ReqAckOprTeamMember* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(member_id_, other->member_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckInviteTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->invite_target_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckInviteTeam::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqAckInviteTeam::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
void ReqAckInviteTeam::clear_invite_target_id() {
  if (GetArenaNoVirtual() == NULL && invite_target_id_ != NULL) {
    delete invite_target_id_;
  }
  invite_target_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqAckInviteTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckInviteTeam)
}
ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_invite_target_id()) {
    invite_target_id_ = new ::NFMsg::Ident(*from.invite_target_id_);
  } else {
    invite_target_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckInviteTeam)
}

void ReqAckInviteTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_target_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(invite_target_id_));
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckInviteTeam)
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete invite_target_id_;
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqAckInviteTeam.base);
  return *internal_default_instance();
}


void ReqAckInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && invite_target_id_ != NULL) {
    delete invite_target_id_;
  }
  invite_target_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckInviteTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident invite_target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invite_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckInviteTeam)
  return false;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // .NFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_invite_target_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckInviteTeam)
}

::google::protobuf::uint8* ReqAckInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // .NFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_invite_target_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckInviteTeam)
  return target;
}

size_t ReqAckInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckInviteTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // .NFMsg.Ident invite_target_id = 3;
  if (this->has_invite_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *invite_target_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckInviteTeam)
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.has_invite_target_id()) {
    mutable_invite_target_id()->::NFMsg::Ident::MergeFrom(from.invite_target_id());
  }
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckInviteTeam::InternalSwap(ReqAckInviteTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(invite_target_id_, other->invite_target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqTeamEnterEctype::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void ReqTeamEnterEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_ReqTeamEnterEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqTeamEnterEctype)
}
ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nserverid_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqTeamEnterEctype)
}

void ReqTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nserverid_));
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqTeamEnterEctype)
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_ReqTeamEnterEctype.base);
  return *internal_default_instance();
}


void ReqTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  ::memset(&nectypeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  _internal_metadata_.Clear();
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqTeamEnterEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nServerID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqTeamEnterEctype)
  return false;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqTeamEnterEctype)
}

::google::protobuf::uint8* ReqTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqTeamEnterEctype)
  return target;
}

size_t ReqTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqTeamEnterEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nectypeid());
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngroupid());
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  // int32 nServerID = 6;
  if (this->nserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqTeamEnterEctype)
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.nectypeid() != 0) {
    set_nectypeid(from.nectypeid());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.nresult() != 0) {
    set_nresult(from.nresult());
  }
  if (from.nserverid() != 0) {
    set_nserverid(from.nserverid());
  }
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamEnterEctype::InternalSwap(ReqTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  swap(nserverid_, other->nserverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckTeamEnterEctype::InitAsDefaultInstance() {
  ::NFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckTeamEnterEctype::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void AckTeamEnterEctype::clear_self_id() {
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgTeam_2eproto::scc_info_AckTeamEnterEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckTeamEnterEctype)
}
AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nresult_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckTeamEnterEctype)
}

void AckTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nresult_));
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.AckTeamEnterEctype)
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  ::protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgTeam_2eproto::scc_info_AckTeamEnterEctype.base);
  return *internal_default_instance();
}


void AckTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_id_ != NULL) {
    delete self_id_;
  }
  self_id_ = NULL;
  ::memset(&nectypeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  _internal_metadata_.Clear();
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckTeamEnterEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckTeamEnterEctype)
  return false;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckTeamEnterEctype)
}

::google::protobuf::uint8* AckTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckTeamEnterEctype)
  return target;
}

size_t AckTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckTeamEnterEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident self_id = 2;
  if (this->has_self_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  // int32 nEctypeID = 3;
  if (this->nectypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nectypeid());
  }

  // int32 nGroupID = 4;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngroupid());
  }

  // int32 nResult = 5;
  if (this->nresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckTeamEnterEctype)
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_self_id()) {
    mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
  }
  if (from.nectypeid() != 0) {
    set_nectypeid(from.nectypeid());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.nresult() != 0) {
    set_nresult(from.nresult());
  }
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckTeamEnterEctype::InternalSwap(AckTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_NFMsgTeam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgTeam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TeammemberInfo* Arena::CreateMaybeMessage< ::NFMsg::TeammemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TeammemberInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TeamInfo* Arena::CreateMaybeMessage< ::NFMsg::TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckCreateTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCreateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCreateTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckJoinTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckLeaveTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLeaveTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckLeaveTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckOprTeamMember* Arena::CreateMaybeMessage< ::NFMsg::ReqAckOprTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckOprTeamMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckInviteTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckInviteTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckInviteTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqTeamEnterEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqTeamEnterEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckTeamEnterEctype* Arena::CreateMaybeMessage< ::NFMsg::AckTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckTeamEnterEctype >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
