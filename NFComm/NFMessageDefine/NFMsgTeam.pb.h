// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgTeam.proto

#ifndef PROTOBUF_INCLUDED_NFMsgTeam_2eproto
#define PROTOBUF_INCLUDED_NFMsgTeam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgTeam_2eproto LIBPROTOC_EXPORT

namespace protobuf_NFMsgTeam_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_NFMsgTeam_2eproto
namespace NFMsg {
class AckTeamEnterEctype;
class AckTeamEnterEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckTeamEnterEctypeDefaultTypeInternal _AckTeamEnterEctype_default_instance_;
class ReqAckCreateTeam;
class ReqAckCreateTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCreateTeamDefaultTypeInternal _ReqAckCreateTeam_default_instance_;
class ReqAckInviteTeam;
class ReqAckInviteTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckInviteTeamDefaultTypeInternal _ReqAckInviteTeam_default_instance_;
class ReqAckJoinTeam;
class ReqAckJoinTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckJoinTeamDefaultTypeInternal _ReqAckJoinTeam_default_instance_;
class ReqAckLeaveTeam;
class ReqAckLeaveTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckLeaveTeamDefaultTypeInternal _ReqAckLeaveTeam_default_instance_;
class ReqAckOprTeamMember;
class ReqAckOprTeamMemberDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckOprTeamMemberDefaultTypeInternal _ReqAckOprTeamMember_default_instance_;
class ReqTeamEnterEctype;
class ReqTeamEnterEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqTeamEnterEctypeDefaultTypeInternal _ReqTeamEnterEctype_default_instance_;
class TeamInfo;
class TeamInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;
class TeammemberInfo;
class TeammemberInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern TeammemberInfoDefaultTypeInternal _TeammemberInfo_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::NFMsg::AckTeamEnterEctype* Arena::CreateMaybeMessage<::NFMsg::AckTeamEnterEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckCreateTeam* Arena::CreateMaybeMessage<::NFMsg::ReqAckCreateTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckInviteTeam* Arena::CreateMaybeMessage<::NFMsg::ReqAckInviteTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckJoinTeam* Arena::CreateMaybeMessage<::NFMsg::ReqAckJoinTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckLeaveTeam* Arena::CreateMaybeMessage<::NFMsg::ReqAckLeaveTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckOprTeamMember* Arena::CreateMaybeMessage<::NFMsg::ReqAckOprTeamMember>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqTeamEnterEctype* Arena::CreateMaybeMessage<::NFMsg::ReqTeamEnterEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::TeamInfo* Arena::CreateMaybeMessage<::NFMsg::TeamInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::TeammemberInfo* Arena::CreateMaybeMessage<::NFMsg::TeammemberInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum ReqAckOprTeamMember_EGTeamMemberOprType {
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN = 0,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP = 1,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK = 2,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT = 3,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE = 4,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE = 5,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY = 6,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY = 7,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT = 8,
  ReqAckOprTeamMember_EGTeamMemberOprType_ReqAckOprTeamMember_EGTeamMemberOprType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckOprTeamMember_EGTeamMemberOprType_ReqAckOprTeamMember_EGTeamMemberOprType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value);
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
const int ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE = ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
inline const ::std::string& ReqAckOprTeamMember_EGTeamMemberOprType_Name(ReqAckOprTeamMember_EGTeamMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), value);
}
inline bool ReqAckOprTeamMember_EGTeamMemberOprType_Parse(
    const ::std::string& name, ReqAckOprTeamMember_EGTeamMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprTeamMember_EGTeamMemberOprType>(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT TeammemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.TeammemberInfo) */ {
 public:
  TeammemberInfo();
  virtual ~TeammemberInfo();

  TeammemberInfo(const TeammemberInfo& from);

  inline TeammemberInfo& operator=(const TeammemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeammemberInfo(TeammemberInfo&& from) noexcept
    : TeammemberInfo() {
    *this = ::std::move(from);
  }

  inline TeammemberInfo& operator=(TeammemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeammemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeammemberInfo* internal_default_instance() {
    return reinterpret_cast<const TeammemberInfo*>(
               &_TeammemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TeammemberInfo* other);
  friend void swap(TeammemberInfo& a, TeammemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeammemberInfo* New() const final {
    return CreateMaybeMessage<TeammemberInfo>(NULL);
  }

  TeammemberInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeammemberInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeammemberInfo& from);
  void MergeFrom(const TeammemberInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeammemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string HeadIcon = 5;
  void clear_headicon();
  static const int kHeadIconFieldNumber = 5;
  const ::std::string& headicon() const;
  void set_headicon(const ::std::string& value);
  #if LANG_CXX11
  void set_headicon(::std::string&& value);
  #endif
  void set_headicon(const char* value);
  void set_headicon(const char* value, size_t size);
  ::std::string* mutable_headicon();
  ::std::string* release_headicon();
  void set_allocated_headicon(::std::string* headicon);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // int32 nLevel = 3;
  void clear_nlevel();
  static const int kNLevelFieldNumber = 3;
  ::google::protobuf::int32 nlevel() const;
  void set_nlevel(::google::protobuf::int32 value);

  // int32 job = 4;
  void clear_job();
  static const int kJobFieldNumber = 4;
  ::google::protobuf::int32 job() const;
  void set_job(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.TeammemberInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr headicon_;
  ::NFMsg::Ident* player_id_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 job_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamInfo(TeamInfo&& from) noexcept
    : TeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamInfo& operator=(TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TeamInfo* other);
  friend void swap(TeamInfo& a, TeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const final {
    return CreateMaybeMessage<TeamInfo>(NULL);
  }

  TeamInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  int teammemberinfo_size() const;
  void clear_teammemberinfo();
  static const int kTeammemberInfoFieldNumber = 3;
  ::NFMsg::TeammemberInfo* mutable_teammemberinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeammemberInfo >*
      mutable_teammemberinfo();
  const ::NFMsg::TeammemberInfo& teammemberinfo(int index) const;
  ::NFMsg::TeammemberInfo* add_teammemberinfo();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeammemberInfo >&
      teammemberinfo() const;

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident captain_id = 2;
  bool has_captain_id() const;
  void clear_captain_id();
  static const int kCaptainIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_captain_id() const;
  public:
  const ::NFMsg::Ident& captain_id() const;
  ::NFMsg::Ident* release_captain_id();
  ::NFMsg::Ident* mutable_captain_id();
  void set_allocated_captain_id(::NFMsg::Ident* captain_id);

  // @@protoc_insertion_point(class_scope:NFMsg.TeamInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeammemberInfo > teammemberinfo_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* captain_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckCreateTeam) */ {
 public:
  ReqAckCreateTeam();
  virtual ~ReqAckCreateTeam();

  ReqAckCreateTeam(const ReqAckCreateTeam& from);

  inline ReqAckCreateTeam& operator=(const ReqAckCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCreateTeam(ReqAckCreateTeam&& from) noexcept
    : ReqAckCreateTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckCreateTeam& operator=(ReqAckCreateTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCreateTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckCreateTeam*>(
               &_ReqAckCreateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqAckCreateTeam* other);
  friend void swap(ReqAckCreateTeam& a, ReqAckCreateTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCreateTeam* New() const final {
    return CreateMaybeMessage<ReqAckCreateTeam>(NULL);
  }

  ReqAckCreateTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckCreateTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckCreateTeam& from);
  void MergeFrom(const ReqAckCreateTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckCreateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  private:
  const ::NFMsg::TeamInfo& _internal_xteaminfo() const;
  public:
  const ::NFMsg::TeamInfo& xteaminfo() const;
  ::NFMsg::TeamInfo* release_xteaminfo();
  ::NFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckCreateTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::TeamInfo* xteaminfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckJoinTeam) */ {
 public:
  ReqAckJoinTeam();
  virtual ~ReqAckJoinTeam();

  ReqAckJoinTeam(const ReqAckJoinTeam& from);

  inline ReqAckJoinTeam& operator=(const ReqAckJoinTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckJoinTeam(ReqAckJoinTeam&& from) noexcept
    : ReqAckJoinTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckJoinTeam& operator=(ReqAckJoinTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckJoinTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckJoinTeam*>(
               &_ReqAckJoinTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReqAckJoinTeam* other);
  friend void swap(ReqAckJoinTeam& a, ReqAckJoinTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckJoinTeam* New() const final {
    return CreateMaybeMessage<ReqAckJoinTeam>(NULL);
  }

  ReqAckJoinTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckJoinTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckJoinTeam& from);
  void MergeFrom(const ReqAckJoinTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckJoinTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  private:
  const ::NFMsg::TeamInfo& _internal_xteaminfo() const;
  public:
  const ::NFMsg::TeamInfo& xteaminfo() const;
  ::NFMsg::TeamInfo* release_xteaminfo();
  ::NFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckJoinTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::TeamInfo* xteaminfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckLeaveTeam) */ {
 public:
  ReqAckLeaveTeam();
  virtual ~ReqAckLeaveTeam();

  ReqAckLeaveTeam(const ReqAckLeaveTeam& from);

  inline ReqAckLeaveTeam& operator=(const ReqAckLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckLeaveTeam(ReqAckLeaveTeam&& from) noexcept
    : ReqAckLeaveTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckLeaveTeam& operator=(ReqAckLeaveTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckLeaveTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckLeaveTeam*>(
               &_ReqAckLeaveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqAckLeaveTeam* other);
  friend void swap(ReqAckLeaveTeam& a, ReqAckLeaveTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLeaveTeam* New() const final {
    return CreateMaybeMessage<ReqAckLeaveTeam>(NULL);
  }

  ReqAckLeaveTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckLeaveTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckLeaveTeam& from);
  void MergeFrom(const ReqAckLeaveTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckLeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  private:
  const ::NFMsg::TeamInfo& _internal_xteaminfo() const;
  public:
  const ::NFMsg::TeamInfo& xteaminfo() const;
  ::NFMsg::TeamInfo* release_xteaminfo();
  ::NFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckLeaveTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::TeamInfo* xteaminfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckOprTeamMember) */ {
 public:
  ReqAckOprTeamMember();
  virtual ~ReqAckOprTeamMember();

  ReqAckOprTeamMember(const ReqAckOprTeamMember& from);

  inline ReqAckOprTeamMember& operator=(const ReqAckOprTeamMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckOprTeamMember(ReqAckOprTeamMember&& from) noexcept
    : ReqAckOprTeamMember() {
    *this = ::std::move(from);
  }

  inline ReqAckOprTeamMember& operator=(ReqAckOprTeamMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprTeamMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckOprTeamMember* internal_default_instance() {
    return reinterpret_cast<const ReqAckOprTeamMember*>(
               &_ReqAckOprTeamMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReqAckOprTeamMember* other);
  friend void swap(ReqAckOprTeamMember& a, ReqAckOprTeamMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckOprTeamMember* New() const final {
    return CreateMaybeMessage<ReqAckOprTeamMember>(NULL);
  }

  ReqAckOprTeamMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckOprTeamMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckOprTeamMember& from);
  void MergeFrom(const ReqAckOprTeamMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckOprTeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckOprTeamMember_EGTeamMemberOprType EGTeamMemberOprType;
  static const EGTeamMemberOprType EGAT_DOWN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
  static const EGTeamMemberOprType EGAT_UP =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP;
  static const EGTeamMemberOprType EGAT_KICK =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK;
  static const EGTeamMemberOprType EGAT_APPOINT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT;
  static const EGTeamMemberOprType EGAT_FIRE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE;
  static const EGTeamMemberOprType EGAT_DEMISE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE;
  static const EGTeamMemberOprType EGAT_ACCEPTAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY;
  static const EGTeamMemberOprType EGAT_DENYAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY;
  static const EGTeamMemberOprType EGAT_KICKOUT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
  static inline bool EGTeamMemberOprType_IsValid(int value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value);
  }
  static const EGTeamMemberOprType EGTeamMemberOprType_MIN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN;
  static const EGTeamMemberOprType EGTeamMemberOprType_MAX =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX;
  static const int EGTeamMemberOprType_ARRAYSIZE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGTeamMemberOprType_descriptor() {
    return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
  }
  static inline const ::std::string& EGTeamMemberOprType_Name(EGTeamMemberOprType value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Name(value);
  }
  static inline bool EGTeamMemberOprType_Parse(const ::std::string& name,
      EGTeamMemberOprType* value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_member_id() const;
  public:
  const ::NFMsg::Ident& member_id() const;
  ::NFMsg::Ident* release_member_id();
  ::NFMsg::Ident* mutable_member_id();
  void set_allocated_member_id(::NFMsg::Ident* member_id);

  // .NFMsg.TeamInfo xTeamInfo = 4;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 4;
  private:
  const ::NFMsg::TeamInfo& _internal_xteaminfo() const;
  public:
  const ::NFMsg::TeamInfo& xteaminfo() const;
  ::NFMsg::TeamInfo* release_xteaminfo();
  ::NFMsg::TeamInfo* mutable_xteaminfo();
  void set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo);

  // .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType type() const;
  void set_type(::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckOprTeamMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* member_id_;
  ::NFMsg::TeamInfo* xteaminfo_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckInviteTeam) */ {
 public:
  ReqAckInviteTeam();
  virtual ~ReqAckInviteTeam();

  ReqAckInviteTeam(const ReqAckInviteTeam& from);

  inline ReqAckInviteTeam& operator=(const ReqAckInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckInviteTeam(ReqAckInviteTeam&& from) noexcept
    : ReqAckInviteTeam() {
    *this = ::std::move(from);
  }

  inline ReqAckInviteTeam& operator=(ReqAckInviteTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckInviteTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckInviteTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAckInviteTeam*>(
               &_ReqAckInviteTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqAckInviteTeam* other);
  friend void swap(ReqAckInviteTeam& a, ReqAckInviteTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckInviteTeam* New() const final {
    return CreateMaybeMessage<ReqAckInviteTeam>(NULL);
  }

  ReqAckInviteTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckInviteTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckInviteTeam& from);
  void MergeFrom(const ReqAckInviteTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_self_id() const;
  public:
  const ::NFMsg::Ident& self_id() const;
  ::NFMsg::Ident* release_self_id();
  ::NFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::NFMsg::Ident* self_id);

  // .NFMsg.Ident invite_target_id = 3;
  bool has_invite_target_id() const;
  void clear_invite_target_id();
  static const int kInviteTargetIdFieldNumber = 3;
  private:
  const ::NFMsg::Ident& _internal_invite_target_id() const;
  public:
  const ::NFMsg::Ident& invite_target_id() const;
  ::NFMsg::Ident* release_invite_target_id();
  ::NFMsg::Ident* mutable_invite_target_id();
  void set_allocated_invite_target_id(::NFMsg::Ident* invite_target_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckInviteTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* self_id_;
  ::NFMsg::Ident* invite_target_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqTeamEnterEctype) */ {
 public:
  ReqTeamEnterEctype();
  virtual ~ReqTeamEnterEctype();

  ReqTeamEnterEctype(const ReqTeamEnterEctype& from);

  inline ReqTeamEnterEctype& operator=(const ReqTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqTeamEnterEctype(ReqTeamEnterEctype&& from) noexcept
    : ReqTeamEnterEctype() {
    *this = ::std::move(from);
  }

  inline ReqTeamEnterEctype& operator=(ReqTeamEnterEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTeamEnterEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqTeamEnterEctype* internal_default_instance() {
    return reinterpret_cast<const ReqTeamEnterEctype*>(
               &_ReqTeamEnterEctype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReqTeamEnterEctype* other);
  friend void swap(ReqTeamEnterEctype& a, ReqTeamEnterEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqTeamEnterEctype* New() const final {
    return CreateMaybeMessage<ReqTeamEnterEctype>(NULL);
  }

  ReqTeamEnterEctype* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqTeamEnterEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqTeamEnterEctype& from);
  void MergeFrom(const ReqTeamEnterEctype& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_self_id() const;
  public:
  const ::NFMsg::Ident& self_id() const;
  ::NFMsg::Ident* release_self_id();
  ::NFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::NFMsg::Ident* self_id);

  // int32 nEctypeID = 3;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // int32 nGroupID = 4;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // int32 nResult = 5;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // int32 nServerID = 6;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 6;
  ::google::protobuf::int32 nserverid() const;
  void set_nserverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqTeamEnterEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  ::google::protobuf::int32 nserverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckTeamEnterEctype) */ {
 public:
  AckTeamEnterEctype();
  virtual ~AckTeamEnterEctype();

  AckTeamEnterEctype(const AckTeamEnterEctype& from);

  inline AckTeamEnterEctype& operator=(const AckTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckTeamEnterEctype(AckTeamEnterEctype&& from) noexcept
    : AckTeamEnterEctype() {
    *this = ::std::move(from);
  }

  inline AckTeamEnterEctype& operator=(AckTeamEnterEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTeamEnterEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckTeamEnterEctype* internal_default_instance() {
    return reinterpret_cast<const AckTeamEnterEctype*>(
               &_AckTeamEnterEctype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AckTeamEnterEctype* other);
  friend void swap(AckTeamEnterEctype& a, AckTeamEnterEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckTeamEnterEctype* New() const final {
    return CreateMaybeMessage<AckTeamEnterEctype>(NULL);
  }

  AckTeamEnterEctype* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckTeamEnterEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckTeamEnterEctype& from);
  void MergeFrom(const AckTeamEnterEctype& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_self_id() const;
  public:
  const ::NFMsg::Ident& self_id() const;
  ::NFMsg::Ident* release_self_id();
  ::NFMsg::Ident* mutable_self_id();
  void set_allocated_self_id(::NFMsg::Ident* self_id);

  // int32 nEctypeID = 3;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // int32 nGroupID = 4;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // int32 nResult = 5;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.AckTeamEnterEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeammemberInfo

// .NFMsg.Ident player_id = 1;
inline bool TeammemberInfo::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline const ::NFMsg::Ident& TeammemberInfo::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& TeammemberInfo::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.TeammemberInfo.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* TeammemberInfo::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.TeammemberInfo.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* TeammemberInfo::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.TeammemberInfo.player_id)
  return player_id_;
}
inline void TeammemberInfo::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeammemberInfo.player_id)
}

// string name = 2;
inline void TeammemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeammemberInfo::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeammemberInfo.name)
  return name_.GetNoArena();
}
inline void TeammemberInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.TeammemberInfo.name)
}
#if LANG_CXX11
inline void TeammemberInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.TeammemberInfo.name)
}
#endif
inline void TeammemberInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.TeammemberInfo.name)
}
inline void TeammemberInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.TeammemberInfo.name)
}
inline ::std::string* TeammemberInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.TeammemberInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.TeammemberInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeammemberInfo.name)
}

// int32 nLevel = 3;
inline void TeammemberInfo::clear_nlevel() {
  nlevel_ = 0;
}
inline ::google::protobuf::int32 TeammemberInfo::nlevel() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeammemberInfo.nLevel)
  return nlevel_;
}
inline void TeammemberInfo::set_nlevel(::google::protobuf::int32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.TeammemberInfo.nLevel)
}

// int32 job = 4;
inline void TeammemberInfo::clear_job() {
  job_ = 0;
}
inline ::google::protobuf::int32 TeammemberInfo::job() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeammemberInfo.job)
  return job_;
}
inline void TeammemberInfo::set_job(::google::protobuf::int32 value) {
  
  job_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.TeammemberInfo.job)
}

// string HeadIcon = 5;
inline void TeammemberInfo::clear_headicon() {
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeammemberInfo::headicon() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeammemberInfo.HeadIcon)
  return headicon_.GetNoArena();
}
inline void TeammemberInfo::set_headicon(const ::std::string& value) {
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.TeammemberInfo.HeadIcon)
}
#if LANG_CXX11
inline void TeammemberInfo::set_headicon(::std::string&& value) {
  
  headicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.TeammemberInfo.HeadIcon)
}
#endif
inline void TeammemberInfo::set_headicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.TeammemberInfo.HeadIcon)
}
inline void TeammemberInfo::set_headicon(const char* value, size_t size) {
  
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.TeammemberInfo.HeadIcon)
}
inline ::std::string* TeammemberInfo::mutable_headicon() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.TeammemberInfo.HeadIcon)
  return headicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_headicon() {
  // @@protoc_insertion_point(field_release:NFMsg.TeammemberInfo.HeadIcon)
  
  return headicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_headicon(::std::string* headicon) {
  if (headicon != NULL) {
    
  } else {
    
  }
  headicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headicon);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeammemberInfo.HeadIcon)
}

// -------------------------------------------------------------------

// TeamInfo

// .NFMsg.Ident team_id = 1;
inline bool TeamInfo::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& TeamInfo::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& TeamInfo::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.TeamInfo.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* TeamInfo::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.TeamInfo.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* TeamInfo::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.TeamInfo.team_id)
  return team_id_;
}
inline void TeamInfo::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeamInfo.team_id)
}

// .NFMsg.Ident captain_id = 2;
inline bool TeamInfo::has_captain_id() const {
  return this != internal_default_instance() && captain_id_ != NULL;
}
inline const ::NFMsg::Ident& TeamInfo::_internal_captain_id() const {
  return *captain_id_;
}
inline const ::NFMsg::Ident& TeamInfo::captain_id() const {
  const ::NFMsg::Ident* p = captain_id_;
  // @@protoc_insertion_point(field_get:NFMsg.TeamInfo.captain_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* TeamInfo::release_captain_id() {
  // @@protoc_insertion_point(field_release:NFMsg.TeamInfo.captain_id)
  
  ::NFMsg::Ident* temp = captain_id_;
  captain_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* TeamInfo::mutable_captain_id() {
  
  if (captain_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    captain_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.TeamInfo.captain_id)
  return captain_id_;
}
inline void TeamInfo::set_allocated_captain_id(::NFMsg::Ident* captain_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(captain_id_);
  }
  if (captain_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      captain_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, captain_id, submessage_arena);
    }
    
  } else {
    
  }
  captain_id_ = captain_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeamInfo.captain_id)
}

// repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
inline int TeamInfo::teammemberinfo_size() const {
  return teammemberinfo_.size();
}
inline void TeamInfo::clear_teammemberinfo() {
  teammemberinfo_.Clear();
}
inline ::NFMsg::TeammemberInfo* TeamInfo::mutable_teammemberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::TeammemberInfo >*
TeamInfo::mutable_teammemberinfo() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.TeamInfo.teammemberInfo)
  return &teammemberinfo_;
}
inline const ::NFMsg::TeammemberInfo& TeamInfo::teammemberinfo(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Get(index);
}
inline ::NFMsg::TeammemberInfo* TeamInfo::add_teammemberinfo() {
  // @@protoc_insertion_point(field_add:NFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeammemberInfo >&
TeamInfo::teammemberinfo() const {
  // @@protoc_insertion_point(field_list:NFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_;
}

// -------------------------------------------------------------------

// ReqAckCreateTeam

// .NFMsg.Ident team_id = 1;
inline bool ReqAckCreateTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckCreateTeam::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckCreateTeam::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckCreateTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckCreateTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckCreateTeam.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckCreateTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckCreateTeam.team_id)
  return team_id_;
}
inline void ReqAckCreateTeam::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckCreateTeam.team_id)
}

// .NFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckCreateTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckCreateTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::NFMsg::TeamInfo& ReqAckCreateTeam::_internal_xteaminfo() const {
  return *xteaminfo_;
}
inline const ::NFMsg::TeamInfo& ReqAckCreateTeam::xteaminfo() const {
  const ::NFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckCreateTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::TeamInfo*>(
      &::NFMsg::_TeamInfo_default_instance_);
}
inline ::NFMsg::TeamInfo* ReqAckCreateTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckCreateTeam.xTeamInfo)
  
  ::NFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::NFMsg::TeamInfo* ReqAckCreateTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::TeamInfo>(GetArenaNoVirtual());
    xteaminfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckCreateTeam::set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckCreateTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckJoinTeam

// .NFMsg.Ident team_id = 1;
inline bool ReqAckJoinTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckJoinTeam::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckJoinTeam::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckJoinTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckJoinTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckJoinTeam.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckJoinTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckJoinTeam.team_id)
  return team_id_;
}
inline void ReqAckJoinTeam::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckJoinTeam.team_id)
}

// .NFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckJoinTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckJoinTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::NFMsg::TeamInfo& ReqAckJoinTeam::_internal_xteaminfo() const {
  return *xteaminfo_;
}
inline const ::NFMsg::TeamInfo& ReqAckJoinTeam::xteaminfo() const {
  const ::NFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckJoinTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::TeamInfo*>(
      &::NFMsg::_TeamInfo_default_instance_);
}
inline ::NFMsg::TeamInfo* ReqAckJoinTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckJoinTeam.xTeamInfo)
  
  ::NFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::NFMsg::TeamInfo* ReqAckJoinTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::TeamInfo>(GetArenaNoVirtual());
    xteaminfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckJoinTeam::set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckJoinTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckLeaveTeam

// .NFMsg.Ident team_id = 1;
inline bool ReqAckLeaveTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckLeaveTeam::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckLeaveTeam::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckLeaveTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckLeaveTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckLeaveTeam.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckLeaveTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckLeaveTeam.team_id)
  return team_id_;
}
inline void ReqAckLeaveTeam::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckLeaveTeam.team_id)
}

// .NFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckLeaveTeam::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckLeaveTeam::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::NFMsg::TeamInfo& ReqAckLeaveTeam::_internal_xteaminfo() const {
  return *xteaminfo_;
}
inline const ::NFMsg::TeamInfo& ReqAckLeaveTeam::xteaminfo() const {
  const ::NFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckLeaveTeam.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::TeamInfo*>(
      &::NFMsg::_TeamInfo_default_instance_);
}
inline ::NFMsg::TeamInfo* ReqAckLeaveTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckLeaveTeam.xTeamInfo)
  
  ::NFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::NFMsg::TeamInfo* ReqAckLeaveTeam::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::TeamInfo>(GetArenaNoVirtual());
    xteaminfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckLeaveTeam::set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckLeaveTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckOprTeamMember

// .NFMsg.Ident team_id = 1;
inline bool ReqAckOprTeamMember::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckOprTeamMember::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckOprTeamMember::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprTeamMember.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckOprTeamMember::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckOprTeamMember.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckOprTeamMember::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckOprTeamMember.team_id)
  return team_id_;
}
inline void ReqAckOprTeamMember::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckOprTeamMember.team_id)
}

// .NFMsg.Ident member_id = 2;
inline bool ReqAckOprTeamMember::has_member_id() const {
  return this != internal_default_instance() && member_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckOprTeamMember::_internal_member_id() const {
  return *member_id_;
}
inline const ::NFMsg::Ident& ReqAckOprTeamMember::member_id() const {
  const ::NFMsg::Ident* p = member_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprTeamMember.member_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckOprTeamMember::release_member_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckOprTeamMember.member_id)
  
  ::NFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckOprTeamMember::mutable_member_id() {
  
  if (member_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    member_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckOprTeamMember.member_id)
  return member_id_;
}
inline void ReqAckOprTeamMember::set_allocated_member_id(::NFMsg::Ident* member_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    
  } else {
    
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckOprTeamMember.member_id)
}

// .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
inline void ReqAckOprTeamMember::clear_type() {
  type_ = 0;
}
inline ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprTeamMember.type)
  return static_cast< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(type_);
}
inline void ReqAckOprTeamMember::set_type(::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckOprTeamMember.type)
}

// .NFMsg.TeamInfo xTeamInfo = 4;
inline bool ReqAckOprTeamMember::has_xteaminfo() const {
  return this != internal_default_instance() && xteaminfo_ != NULL;
}
inline void ReqAckOprTeamMember::clear_xteaminfo() {
  if (GetArenaNoVirtual() == NULL && xteaminfo_ != NULL) {
    delete xteaminfo_;
  }
  xteaminfo_ = NULL;
}
inline const ::NFMsg::TeamInfo& ReqAckOprTeamMember::_internal_xteaminfo() const {
  return *xteaminfo_;
}
inline const ::NFMsg::TeamInfo& ReqAckOprTeamMember::xteaminfo() const {
  const ::NFMsg::TeamInfo* p = xteaminfo_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprTeamMember.xTeamInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::TeamInfo*>(
      &::NFMsg::_TeamInfo_default_instance_);
}
inline ::NFMsg::TeamInfo* ReqAckOprTeamMember::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckOprTeamMember.xTeamInfo)
  
  ::NFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline ::NFMsg::TeamInfo* ReqAckOprTeamMember::mutable_xteaminfo() {
  
  if (xteaminfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::TeamInfo>(GetArenaNoVirtual());
    xteaminfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_;
}
inline void ReqAckOprTeamMember::set_allocated_xteaminfo(::NFMsg::TeamInfo* xteaminfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xteaminfo_;
  }
  if (xteaminfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xteaminfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  xteaminfo_ = xteaminfo;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckOprTeamMember.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckInviteTeam

// .NFMsg.Ident team_id = 1;
inline bool ReqAckInviteTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckInviteTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckInviteTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckInviteTeam.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckInviteTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckInviteTeam.team_id)
  return team_id_;
}
inline void ReqAckInviteTeam::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckInviteTeam.team_id)
}

// .NFMsg.Ident self_id = 2;
inline bool ReqAckInviteTeam::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::_internal_self_id() const {
  return *self_id_;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::self_id() const {
  const ::NFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckInviteTeam.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckInviteTeam::release_self_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckInviteTeam.self_id)
  
  ::NFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckInviteTeam::mutable_self_id() {
  
  if (self_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    self_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckInviteTeam.self_id)
  return self_id_;
}
inline void ReqAckInviteTeam::set_allocated_self_id(::NFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckInviteTeam.self_id)
}

// .NFMsg.Ident invite_target_id = 3;
inline bool ReqAckInviteTeam::has_invite_target_id() const {
  return this != internal_default_instance() && invite_target_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::_internal_invite_target_id() const {
  return *invite_target_id_;
}
inline const ::NFMsg::Ident& ReqAckInviteTeam::invite_target_id() const {
  const ::NFMsg::Ident* p = invite_target_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckInviteTeam.invite_target_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckInviteTeam::release_invite_target_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckInviteTeam.invite_target_id)
  
  ::NFMsg::Ident* temp = invite_target_id_;
  invite_target_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckInviteTeam::mutable_invite_target_id() {
  
  if (invite_target_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    invite_target_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_;
}
inline void ReqAckInviteTeam::set_allocated_invite_target_id(::NFMsg::Ident* invite_target_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(invite_target_id_);
  }
  if (invite_target_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invite_target_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invite_target_id, submessage_arena);
    }
    
  } else {
    
  }
  invite_target_id_ = invite_target_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckInviteTeam.invite_target_id)
}

// -------------------------------------------------------------------

// ReqTeamEnterEctype

// .NFMsg.Ident team_id = 1;
inline bool ReqTeamEnterEctype::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqTeamEnterEctype::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqTeamEnterEctype::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqTeamEnterEctype.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqTeamEnterEctype::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqTeamEnterEctype.team_id)
  return team_id_;
}
inline void ReqTeamEnterEctype::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqTeamEnterEctype.team_id)
}

// .NFMsg.Ident self_id = 2;
inline bool ReqTeamEnterEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqTeamEnterEctype::_internal_self_id() const {
  return *self_id_;
}
inline const ::NFMsg::Ident& ReqTeamEnterEctype::self_id() const {
  const ::NFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqTeamEnterEctype.self_id)
  
  ::NFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqTeamEnterEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    self_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqTeamEnterEctype.self_id)
  return self_id_;
}
inline void ReqTeamEnterEctype::set_allocated_self_id(::NFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqTeamEnterEctype.self_id)
}

// int32 nEctypeID = 3;
inline void ReqTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void ReqTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqTeamEnterEctype.nEctypeID)
}

// int32 nGroupID = 4;
inline void ReqTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void ReqTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqTeamEnterEctype.nGroupID)
}

// int32 nResult = 5;
inline void ReqTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.nResult)
  return nresult_;
}
inline void ReqTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  
  nresult_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqTeamEnterEctype.nResult)
}

// int32 nServerID = 6;
inline void ReqTeamEnterEctype::clear_nserverid() {
  nserverid_ = 0;
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nserverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqTeamEnterEctype.nServerID)
  return nserverid_;
}
inline void ReqTeamEnterEctype::set_nserverid(::google::protobuf::int32 value) {
  
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqTeamEnterEctype.nServerID)
}

// -------------------------------------------------------------------

// AckTeamEnterEctype

// .NFMsg.Ident team_id = 1;
inline bool AckTeamEnterEctype::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckTeamEnterEctype::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckTeamEnterEctype::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamEnterEctype.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckTeamEnterEctype.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckTeamEnterEctype::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamEnterEctype.team_id)
  return team_id_;
}
inline void AckTeamEnterEctype::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckTeamEnterEctype.team_id)
}

// .NFMsg.Ident self_id = 2;
inline bool AckTeamEnterEctype::has_self_id() const {
  return this != internal_default_instance() && self_id_ != NULL;
}
inline const ::NFMsg::Ident& AckTeamEnterEctype::_internal_self_id() const {
  return *self_id_;
}
inline const ::NFMsg::Ident& AckTeamEnterEctype::self_id() const {
  const ::NFMsg::Ident* p = self_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamEnterEctype.self_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckTeamEnterEctype.self_id)
  
  ::NFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckTeamEnterEctype::mutable_self_id() {
  
  if (self_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    self_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamEnterEctype.self_id)
  return self_id_;
}
inline void AckTeamEnterEctype::set_allocated_self_id(::NFMsg::Ident* self_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(self_id_);
  }
  if (self_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_id, submessage_arena);
    }
    
  } else {
    
  }
  self_id_ = self_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckTeamEnterEctype.self_id)
}

// int32 nEctypeID = 3;
inline void AckTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void AckTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckTeamEnterEctype.nEctypeID)
}

// int32 nGroupID = 4;
inline void AckTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void AckTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckTeamEnterEctype.nGroupID)
}

// int32 nResult = 5;
inline void AckTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamEnterEctype.nResult)
  return nresult_;
}
inline void AckTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  
  nresult_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckTeamEnterEctype.nResult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType>() {
  return ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFMsgTeam_2eproto
