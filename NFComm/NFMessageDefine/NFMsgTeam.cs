// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgTeam.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgTeam.proto</summary>
  public static partial class NFMsgTeamReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgTeam.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgTeamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ORk1zZ1RlYW0ucHJvdG8SBU5GTXNnGg9ORk1zZ0Jhc2UucHJvdG8ibgoO",
            "VGVhbW1lbWJlckluZm8SHwoJcGxheWVyX2lkGAEgASgLMgwuTkZNc2cuSWRl",
            "bnQSDAoEbmFtZRgCIAEoCRIOCgZuTGV2ZWwYAyABKAUSCwoDam9iGAQgASgF",
            "EhAKCEhlYWRJY29uGAUgASgJInoKCFRlYW1JbmZvEh0KB3RlYW1faWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIgCgpjYXB0YWluX2lkGAIgASgLMgwuTkZNc2cu",
            "SWRlbnQSLQoOdGVhbW1lbWJlckluZm8YAyADKAsyFS5ORk1zZy5UZWFtbWVt",
            "YmVySW5mbyJVChBSZXFBY2tDcmVhdGVUZWFtEh0KB3RlYW1faWQYASABKAsy",
            "DC5ORk1zZy5JZGVudBIiCgl4VGVhbUluZm8YAiABKAsyDy5ORk1zZy5UZWFt",
            "SW5mbyJTCg5SZXFBY2tKb2luVGVhbRIdCgd0ZWFtX2lkGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQSIgoJeFRlYW1JbmZvGAIgASgLMg8uTkZNc2cuVGVhbUluZm8i",
            "VAoPUmVxQWNrTGVhdmVUZWFtEh0KB3RlYW1faWQYASABKAsyDC5ORk1zZy5J",
            "ZGVudBIiCgl4VGVhbUluZm8YAiABKAsyDy5ORk1zZy5UZWFtSW5mbyLoAgoT",
            "UmVxQWNrT3ByVGVhbU1lbWJlchIdCgd0ZWFtX2lkGAEgASgLMgwuTkZNc2cu",
            "SWRlbnQSHwoJbWVtYmVyX2lkGAIgASgLMgwuTkZNc2cuSWRlbnQSPAoEdHlw",
            "ZRgDIAEoDjIuLk5GTXNnLlJlcUFja09wclRlYW1NZW1iZXIuRUdUZWFtTWVt",
            "YmVyT3ByVHlwZRIiCgl4VGVhbUluZm8YBCABKAsyDy5ORk1zZy5UZWFtSW5m",
            "byKuAQoTRUdUZWFtTWVtYmVyT3ByVHlwZRINCglFR0FUX0RPV04QABILCgdF",
            "R0FUX1VQEAESDQoJRUdBVF9LSUNLEAISEAoMRUdBVF9BUFBPSU5UEAMSDQoJ",
            "RUdBVF9GSVJFEAQSDwoLRUdBVF9ERU1JU0UQBRIUChBFR0FUX0FDQ0VQVEFQ",
            "UExZEAYSEgoORUdBVF9ERU5ZQVBQTFkQBxIQCgxFR0FUX0tJQ0tPVVQQCCJ4",
            "ChBSZXFBY2tJbnZpdGVUZWFtEh0KB3RlYW1faWQYASABKAsyDC5ORk1zZy5J",
            "ZGVudBIdCgdzZWxmX2lkGAIgASgLMgwuTkZNc2cuSWRlbnQSJgoQaW52aXRl",
            "X3RhcmdldF9pZBgDIAEoCzIMLk5GTXNnLklkZW50IpsBChJSZXFUZWFtRW50",
            "ZXJFY3R5cGUSHQoHdGVhbV9pZBgBIAEoCzIMLk5GTXNnLklkZW50Eh0KB3Nl",
            "bGZfaWQYAiABKAsyDC5ORk1zZy5JZGVudBIRCgluRWN0eXBlSUQYAyABKAUS",
            "EAoIbkdyb3VwSUQYBCABKAUSDwoHblJlc3VsdBgFIAEoBRIRCgluU2VydmVy",
            "SUQYBiABKAUiiAEKEkFja1RlYW1FbnRlckVjdHlwZRIdCgd0ZWFtX2lkGAEg",
            "ASgLMgwuTkZNc2cuSWRlbnQSHQoHc2VsZl9pZBgCIAEoCzIMLk5GTXNnLklk",
            "ZW50EhEKCW5FY3R5cGVJRBgDIAEoBRIQCghuR3JvdXBJRBgEIAEoBRIPCgdu",
            "UmVzdWx0GAUgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeammemberInfo), global::NFMsg.TeammemberInfo.Parser, new[]{ "player_id", "name", "nLevel", "job", "HeadIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeamInfo), global::NFMsg.TeamInfo.Parser, new[]{ "team_id", "captain_id", "teammemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateTeam), global::NFMsg.ReqAckCreateTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinTeam), global::NFMsg.ReqAckJoinTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveTeam), global::NFMsg.ReqAckLeaveTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprTeamMember), global::NFMsg.ReqAckOprTeamMember.Parser, new[]{ "team_id", "member_id", "type", "xTeamInfo" }, null, new[]{ typeof(global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckInviteTeam), global::NFMsg.ReqAckInviteTeam.Parser, new[]{ "team_id", "self_id", "invite_target_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqTeamEnterEctype), global::NFMsg.ReqTeamEnterEctype.Parser, new[]{ "team_id", "self_id", "nEctypeID", "nGroupID", "nResult", "nServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckTeamEnterEctype), global::NFMsg.AckTeamEnterEctype.Parser, new[]{ "team_id", "self_id", "nEctypeID", "nGroupID", "nResult" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TeammemberInfo : pb::IMessage<TeammemberInfo> {
    private static readonly pb::MessageParser<TeammemberInfo> _parser = new pb::MessageParser<TeammemberInfo>(() => new TeammemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo(TeammemberInfo other) : this() {
      playerId_ = other.playerId_ != null ? other.playerId_.Clone() : null;
      name_ = other.name_;
      nLevel_ = other.nLevel_;
      job_ = other.job_;
      headIcon_ = other.headIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo Clone() {
      return new TeammemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int player_idFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    /// <summary>
    ///成员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident player_id {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int nLevelFieldNumber = 3;
    private int nLevel_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int jobFieldNumber = 4;
    private int job_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 5;
    private string headIcon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(player_id, other.player_id)) return false;
      if (name != other.name) return false;
      if (nLevel != other.nLevel) return false;
      if (job != other.job) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= player_id.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (nLevel != 0) hash ^= nLevel.GetHashCode();
      if (job != 0) hash ^= job.GetHashCode();
      if (HeadIcon.Length != 0) hash ^= HeadIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(player_id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (nLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nLevel);
      }
      if (job != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(job);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(player_id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (nLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nLevel);
      }
      if (job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(job);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeammemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::NFMsg.Ident();
        }
        player_id.MergeFrom(other.player_id);
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.nLevel != 0) {
        nLevel = other.nLevel;
      }
      if (other.job != 0) {
        job = other.job;
      }
      if (other.HeadIcon.Length != 0) {
        HeadIcon = other.HeadIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            nLevel = input.ReadInt32();
            break;
          }
          case 32: {
            job = input.ReadInt32();
            break;
          }
          case 42: {
            HeadIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      captainId_ = other.captainId_ != null ? other.captainId_.Clone() : null;
      teammemberInfo_ = other.teammemberInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "captain_id" field.</summary>
    public const int captain_idFieldNumber = 2;
    private global::NFMsg.Ident captainId_;
    /// <summary>
    ///队长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident captain_id {
      get { return captainId_; }
      set {
        captainId_ = value;
      }
    }

    /// <summary>Field number for the "teammemberInfo" field.</summary>
    public const int teammemberInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.TeammemberInfo> _repeated_teammemberInfo_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.TeammemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TeammemberInfo> teammemberInfo_ = new pbc::RepeatedField<global::NFMsg.TeammemberInfo>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TeammemberInfo> teammemberInfo {
      get { return teammemberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(captain_id, other.captain_id)) return false;
      if(!teammemberInfo_.Equals(other.teammemberInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (captainId_ != null) hash ^= captain_id.GetHashCode();
      hash ^= teammemberInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (captainId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(captain_id);
      }
      teammemberInfo_.WriteTo(output, _repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (captainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(captain_id);
      }
      size += teammemberInfo_.CalculateSize(_repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.captainId_ != null) {
        if (captainId_ == null) {
          captainId_ = new global::NFMsg.Ident();
        }
        captain_id.MergeFrom(other.captain_id);
      }
      teammemberInfo_.Add(other.teammemberInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (captainId_ == null) {
              captainId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(captainId_);
            break;
          }
          case 26: {
            teammemberInfo_.AddEntriesFrom(input, _repeated_teammemberInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATE_TEAM                       		= 860; 	// 申请创建队伍
  ///EGMI_ACK_CREATE_TEAM							= 861; 	// 创建队伍结果
  /// </summary>
  public sealed partial class ReqAckCreateTeam : pb::IMessage<ReqAckCreateTeam> {
    private static readonly pb::MessageParser<ReqAckCreateTeam> _parser = new pb::MessageParser<ReqAckCreateTeam>(() => new ReqAckCreateTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam(ReqAckCreateTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam Clone() {
      return new ReqAckCreateTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_JOIN_TEAM                         		= 862; 	// 申请加入队伍
  ///EGMI_ACK_JOIN_TEAM								= 863; 	// 加入队伍结果
  /// </summary>
  public sealed partial class ReqAckJoinTeam : pb::IMessage<ReqAckJoinTeam> {
    private static readonly pb::MessageParser<ReqAckJoinTeam> _parser = new pb::MessageParser<ReqAckJoinTeam>(() => new ReqAckJoinTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam(ReqAckJoinTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam Clone() {
      return new ReqAckJoinTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_LEAVE_TEAM                        		= 864; 	// 申请离开队伍/
  ///EGMI_ACK_LEAVE_TEAM								= 865; 	// 离开队伍结果 
  /// </summary>
  public sealed partial class ReqAckLeaveTeam : pb::IMessage<ReqAckLeaveTeam> {
    private static readonly pb::MessageParser<ReqAckLeaveTeam> _parser = new pb::MessageParser<ReqAckLeaveTeam>(() => new ReqAckLeaveTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam(ReqAckLeaveTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam Clone() {
      return new ReqAckLeaveTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_OPRMEMBER_TEAM							= 867; 	// 操作成员
  ///	EGMI_ACK_OPRMEMBER_TEAM							= 868; 	// 操作成员 
  /// </summary>
  public sealed partial class ReqAckOprTeamMember : pb::IMessage<ReqAckOprTeamMember> {
    private static readonly pb::MessageParser<ReqAckOprTeamMember> _parser = new pb::MessageParser<ReqAckOprTeamMember>(() => new ReqAckOprTeamMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprTeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember(ReqAckOprTeamMember other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      memberId_ = other.memberId_ != null ? other.memberId_.Clone() : null;
      type_ = other.type_;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember Clone() {
      return new ReqAckOprTeamMember(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int member_idFieldNumber = 2;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident member_id {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int typeFieldNumber = 3;
    private global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 4;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprTeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprTeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(member_id, other.member_id)) return false;
      if (type != other.type) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (memberId_ != null) hash ^= member_id.GetHashCode();
      if (type != 0) hash ^= type.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(member_id);
      }
      if (type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) type);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(member_id);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) type);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprTeamMember other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          memberId_ = new global::NFMsg.Ident();
        }
        member_id.MergeFrom(other.member_id);
      }
      if (other.type != 0) {
        type = other.type;
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) input.ReadEnum();
            break;
          }
          case 34: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprTeamMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGTeamMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EGAT_DOWN = 0,
        [pbr::OriginalName("EGAT_UP")] EGAT_UP = 1,
        [pbr::OriginalName("EGAT_KICK")] EGAT_KICK = 2,
        /// <summary>
        ///任命
        /// </summary>
        [pbr::OriginalName("EGAT_APPOINT")] EGAT_APPOINT = 3,
        /// <summary>
        ///撤职
        /// </summary>
        [pbr::OriginalName("EGAT_FIRE")] EGAT_FIRE = 4,
        /// <summary>
        ///禅让
        /// </summary>
        [pbr::OriginalName("EGAT_DEMISE")] EGAT_DEMISE = 5,
        /// <summary>
        ///收人
        /// </summary>
        [pbr::OriginalName("EGAT_ACCEPTAPPLY")] EGAT_ACCEPTAPPLY = 6,
        /// <summary>
        ///拒收
        /// </summary>
        [pbr::OriginalName("EGAT_DENYAPPLY")] EGAT_DENYAPPLY = 7,
        /// <summary>
        ///开除
        /// </summary>
        [pbr::OriginalName("EGAT_KICKOUT")] EGAT_KICKOUT = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///	EGMI_REQ_INVITE_TEAM							= 866; 	// 邀请加入队伍
  /// </summary>
  public sealed partial class ReqAckInviteTeam : pb::IMessage<ReqAckInviteTeam> {
    private static readonly pb::MessageParser<ReqAckInviteTeam> _parser = new pb::MessageParser<ReqAckInviteTeam>(() => new ReqAckInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam(ReqAckInviteTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      inviteTargetId_ = other.inviteTargetId_ != null ? other.inviteTargetId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam Clone() {
      return new ReqAckInviteTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "invite_target_id" field.</summary>
    public const int invite_target_idFieldNumber = 3;
    private global::NFMsg.Ident inviteTargetId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident invite_target_id {
      get { return inviteTargetId_; }
      set {
        inviteTargetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (!object.Equals(invite_target_id, other.invite_target_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (inviteTargetId_ != null) hash ^= invite_target_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (inviteTargetId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(invite_target_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (inviteTargetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(invite_target_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.inviteTargetId_ != null) {
        if (inviteTargetId_ == null) {
          inviteTargetId_ = new global::NFMsg.Ident();
        }
        invite_target_id.MergeFrom(other.invite_target_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 26: {
            if (inviteTargetId_ == null) {
              inviteTargetId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(inviteTargetId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_TEAM_ENTER_ECTYPE					= 869; 	// 组队进副本
  /// </summary>
  public sealed partial class ReqTeamEnterEctype : pb::IMessage<ReqTeamEnterEctype> {
    private static readonly pb::MessageParser<ReqTeamEnterEctype> _parser = new pb::MessageParser<ReqTeamEnterEctype>(() => new ReqTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype(ReqTeamEnterEctype other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      nServerID_ = other.nServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype Clone() {
      return new ReqTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int nEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int nGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int nResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int nServerIDFieldNumber = 6;
    private int nServerID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (nEctypeID != other.nEctypeID) return false;
      if (nGroupID != other.nGroupID) return false;
      if (nResult != other.nResult) return false;
      if (nServerID != other.nServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (nEctypeID != 0) hash ^= nEctypeID.GetHashCode();
      if (nGroupID != 0) hash ^= nGroupID.GetHashCode();
      if (nResult != 0) hash ^= nResult.GetHashCode();
      if (nServerID != 0) hash ^= nServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (nEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nEctypeID);
      }
      if (nGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(nGroupID);
      }
      if (nResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(nResult);
      }
      if (nServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(nServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (nEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nEctypeID);
      }
      if (nGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nGroupID);
      }
      if (nResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nResult);
      }
      if (nServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.nEctypeID != 0) {
        nEctypeID = other.nEctypeID;
      }
      if (other.nGroupID != 0) {
        nGroupID = other.nGroupID;
      }
      if (other.nResult != 0) {
        nResult = other.nResult;
      }
      if (other.nServerID != 0) {
        nServerID = other.nServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            nEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            nGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            nResult = input.ReadInt32();
            break;
          }
          case 48: {
            nServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_TEAM_ENTER_ECTYPE						= 870; 	// 组队进副本
  /// </summary>
  public sealed partial class AckTeamEnterEctype : pb::IMessage<AckTeamEnterEctype> {
    private static readonly pb::MessageParser<AckTeamEnterEctype> _parser = new pb::MessageParser<AckTeamEnterEctype>(() => new AckTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgTeamReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype(AckTeamEnterEctype other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype Clone() {
      return new AckTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int nEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int nGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int nResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (nEctypeID != other.nEctypeID) return false;
      if (nGroupID != other.nGroupID) return false;
      if (nResult != other.nResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (nEctypeID != 0) hash ^= nEctypeID.GetHashCode();
      if (nGroupID != 0) hash ^= nGroupID.GetHashCode();
      if (nResult != 0) hash ^= nResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (nEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nEctypeID);
      }
      if (nGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(nGroupID);
      }
      if (nResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(nResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (nEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nEctypeID);
      }
      if (nGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nGroupID);
      }
      if (nResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.nEctypeID != 0) {
        nEctypeID = other.nEctypeID;
      }
      if (other.nGroupID != 0) {
        nGroupID = other.nGroupID;
      }
      if (other.nResult != 0) {
        nResult = other.nResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            nEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            nGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            nResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
